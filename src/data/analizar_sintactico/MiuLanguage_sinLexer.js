// Generated from ./MiuLanguage_sin.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,32,266,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,
1,0,1,0,1,0,1,0,3,0,90,8,0,1,1,1,1,3,1,94,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,200,8,30,1,31,1,31,1,31,1,31,
1,31,1,31,1,31,1,31,1,31,3,31,211,8,31,1,32,1,32,5,32,215,8,32,10,32,12,
32,218,9,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,4,34,227,8,34,11,34,12,34,
228,1,34,1,34,4,34,233,8,34,11,34,12,34,234,1,35,4,35,238,8,35,11,35,12,
35,239,1,36,1,36,5,36,244,8,36,10,36,12,36,247,9,36,1,37,1,37,5,37,251,8,
37,10,37,12,37,254,9,37,1,38,1,38,1,39,4,39,259,8,39,11,39,12,39,260,1,39,
1,39,1,40,1,40,0,0,41,1,1,3,2,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,3,
23,4,25,5,27,6,29,7,31,8,33,9,35,10,37,11,39,12,41,13,43,14,45,15,47,16,
49,17,51,18,53,19,55,20,57,21,59,22,61,23,63,24,65,25,67,26,69,27,71,28,
73,29,75,30,77,0,79,31,81,32,1,0,7,1,0,34,34,1,0,39,39,1,0,48,57,1,0,65,
90,2,0,65,90,97,122,3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,274,0,1,
1,0,0,0,0,3,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
1,0,0,0,0,75,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,89,1,0,0,0,3,93,1,0,0,0,
5,95,1,0,0,0,7,98,1,0,0,0,9,101,1,0,0,0,11,104,1,0,0,0,13,107,1,0,0,0,15,
109,1,0,0,0,17,111,1,0,0,0,19,114,1,0,0,0,21,117,1,0,0,0,23,119,1,0,0,0,
25,122,1,0,0,0,27,126,1,0,0,0,29,130,1,0,0,0,31,133,1,0,0,0,33,136,1,0,0,
0,35,141,1,0,0,0,37,145,1,0,0,0,39,152,1,0,0,0,41,155,1,0,0,0,43,157,1,0,
0,0,45,160,1,0,0,0,47,163,1,0,0,0,49,165,1,0,0,0,51,167,1,0,0,0,53,169,1,
0,0,0,55,171,1,0,0,0,57,173,1,0,0,0,59,175,1,0,0,0,61,199,1,0,0,0,63,210,
1,0,0,0,65,212,1,0,0,0,67,221,1,0,0,0,69,226,1,0,0,0,71,237,1,0,0,0,73,241,
1,0,0,0,75,248,1,0,0,0,77,255,1,0,0,0,79,258,1,0,0,0,81,264,1,0,0,0,83,90,
3,5,2,0,84,90,3,11,5,0,85,90,3,13,6,0,86,90,3,15,7,0,87,90,3,17,8,0,88,90,
3,19,9,0,89,83,1,0,0,0,89,84,1,0,0,0,89,85,1,0,0,0,89,86,1,0,0,0,89,87,1,
0,0,0,89,88,1,0,0,0,90,2,1,0,0,0,91,94,3,7,3,0,92,94,3,9,4,0,93,91,1,0,0,
0,93,92,1,0,0,0,94,4,1,0,0,0,95,96,5,61,0,0,96,97,5,61,0,0,97,6,1,0,0,0,
98,99,5,38,0,0,99,100,5,38,0,0,100,8,1,0,0,0,101,102,5,124,0,0,102,103,5,
124,0,0,103,10,1,0,0,0,104,105,5,33,0,0,105,106,5,61,0,0,106,12,1,0,0,0,
107,108,5,62,0,0,108,14,1,0,0,0,109,110,5,60,0,0,110,16,1,0,0,0,111,112,
5,62,0,0,112,113,5,61,0,0,113,18,1,0,0,0,114,115,5,60,0,0,115,116,5,61,0,
0,116,20,1,0,0,0,117,118,5,61,0,0,118,22,1,0,0,0,119,120,5,102,0,0,120,121,
5,110,0,0,121,24,1,0,0,0,122,123,5,117,0,0,123,124,5,115,0,0,124,125,5,101,
0,0,125,26,1,0,0,0,126,127,5,108,0,0,127,128,5,101,0,0,128,129,5,116,0,0,
129,28,1,0,0,0,130,131,5,105,0,0,131,132,5,110,0,0,132,30,1,0,0,0,133,134,
5,105,0,0,134,135,5,102,0,0,135,32,1,0,0,0,136,137,5,101,0,0,137,138,5,108,
0,0,138,139,5,115,0,0,139,140,5,101,0,0,140,34,1,0,0,0,141,142,5,102,0,0,
142,143,5,111,0,0,143,144,5,114,0,0,144,36,1,0,0,0,145,146,5,114,0,0,146,
147,5,101,0,0,147,148,5,116,0,0,148,149,5,117,0,0,149,150,5,114,0,0,150,
151,5,110,0,0,151,38,1,0,0,0,152,153,5,45,0,0,153,154,5,62,0,0,154,40,1,
0,0,0,155,156,5,46,0,0,156,42,1,0,0,0,157,158,5,46,0,0,158,159,5,46,0,0,
159,44,1,0,0,0,160,161,5,58,0,0,161,162,5,58,0,0,162,46,1,0,0,0,163,164,
5,44,0,0,164,48,1,0,0,0,165,166,5,59,0,0,166,50,1,0,0,0,167,168,5,58,0,0,
168,52,1,0,0,0,169,170,5,40,0,0,170,54,1,0,0,0,171,172,5,41,0,0,172,56,1,
0,0,0,173,174,5,123,0,0,174,58,1,0,0,0,175,176,5,125,0,0,176,60,1,0,0,0,
177,178,5,105,0,0,178,179,5,110,0,0,179,200,5,116,0,0,180,181,5,102,0,0,
181,182,5,108,0,0,182,183,5,111,0,0,183,184,5,97,0,0,184,200,5,116,0,0,185,
186,5,98,0,0,186,187,5,111,0,0,187,188,5,111,0,0,188,200,5,108,0,0,189,190,
5,115,0,0,190,191,5,116,0,0,191,192,5,114,0,0,192,193,5,105,0,0,193,194,
5,110,0,0,194,200,5,103,0,0,195,196,5,99,0,0,196,197,5,104,0,0,197,198,5,
97,0,0,198,200,5,114,0,0,199,177,1,0,0,0,199,180,1,0,0,0,199,185,1,0,0,0,
199,189,1,0,0,0,199,195,1,0,0,0,200,62,1,0,0,0,201,202,5,116,0,0,202,203,
5,114,0,0,203,204,5,117,0,0,204,211,5,101,0,0,205,206,5,102,0,0,206,207,
5,97,0,0,207,208,5,108,0,0,208,209,5,115,0,0,209,211,5,101,0,0,210,201,1,
0,0,0,210,205,1,0,0,0,211,64,1,0,0,0,212,216,5,34,0,0,213,215,8,0,0,0,214,
213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,0,
0,0,218,216,1,0,0,0,219,220,5,34,0,0,220,66,1,0,0,0,221,222,5,39,0,0,222,
223,8,1,0,0,223,224,5,39,0,0,224,68,1,0,0,0,225,227,7,2,0,0,226,225,1,0,
0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,
232,3,41,20,0,231,233,7,2,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,1,
0,0,0,234,235,1,0,0,0,235,70,1,0,0,0,236,238,7,2,0,0,237,236,1,0,0,0,238,
239,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,72,1,0,0,0,241,245,7,3,0,
0,242,244,3,77,38,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,
246,1,0,0,0,246,74,1,0,0,0,247,245,1,0,0,0,248,252,7,4,0,0,249,251,3,77,
38,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,
76,1,0,0,0,254,252,1,0,0,0,255,256,7,5,0,0,256,78,1,0,0,0,257,259,7,6,0,
0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,262,
1,0,0,0,262,263,6,39,0,0,263,80,1,0,0,0,264,265,9,0,0,0,265,82,1,0,0,0,12,
0,89,93,199,210,216,228,234,239,245,252,260,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class MiuLanguage_sinLexer extends antlr4.Lexer {

    static grammarFileName = "MiuLanguage_sin.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, "'='", "'fn'", "'use'", "'let'", 
                         "'in'", "'if'", "'else'", "'for'", "'return'", 
                         "'->'", "'.'", "'..'", "'::'", "','", "';'", "':'", 
                         "'('", "')'", "'{'", "'}'" ];
	static symbolicNames = [ null, "COMPARISON_OPERATOR", "ADD_OPERATOR", "EQUAL", 
                          "FN", "USE", "LET", "IN", "IF", "ELSE", "FOR", 
                          "RETURN", "ARROW", "DOT", "DOUBLE_DOT", "PP", 
                          "COMMA", "PC", "P", "LPAREN", "RPAREN", "LBRACE", 
                          "RBRACE", "TYPE", "BOOL", "STRING", "CHAR", "FLOAT", 
                          "INT", "IDF", "ID", "WS", "INVALID" ];
	static ruleNames = [ "COMPARISON_OPERATOR", "ADD_OPERATOR", "EQ", "AND", 
                      "OR", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "EQUAL", 
                      "FN", "USE", "LET", "IN", "IF", "ELSE", "FOR", "RETURN", 
                      "ARROW", "DOT", "DOUBLE_DOT", "PP", "COMMA", "PC", 
                      "P", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "TYPE", 
                      "BOOL", "STRING", "CHAR", "FLOAT", "INT", "IDF", "ID", 
                      "IDN", "WS", "INVALID" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

MiuLanguage_sinLexer.EOF = antlr4.Token.EOF;
MiuLanguage_sinLexer.COMPARISON_OPERATOR = 1;
MiuLanguage_sinLexer.ADD_OPERATOR = 2;
MiuLanguage_sinLexer.EQUAL = 3;
MiuLanguage_sinLexer.FN = 4;
MiuLanguage_sinLexer.USE = 5;
MiuLanguage_sinLexer.LET = 6;
MiuLanguage_sinLexer.IN = 7;
MiuLanguage_sinLexer.IF = 8;
MiuLanguage_sinLexer.ELSE = 9;
MiuLanguage_sinLexer.FOR = 10;
MiuLanguage_sinLexer.RETURN = 11;
MiuLanguage_sinLexer.ARROW = 12;
MiuLanguage_sinLexer.DOT = 13;
MiuLanguage_sinLexer.DOUBLE_DOT = 14;
MiuLanguage_sinLexer.PP = 15;
MiuLanguage_sinLexer.COMMA = 16;
MiuLanguage_sinLexer.PC = 17;
MiuLanguage_sinLexer.P = 18;
MiuLanguage_sinLexer.LPAREN = 19;
MiuLanguage_sinLexer.RPAREN = 20;
MiuLanguage_sinLexer.LBRACE = 21;
MiuLanguage_sinLexer.RBRACE = 22;
MiuLanguage_sinLexer.TYPE = 23;
MiuLanguage_sinLexer.BOOL = 24;
MiuLanguage_sinLexer.STRING = 25;
MiuLanguage_sinLexer.CHAR = 26;
MiuLanguage_sinLexer.FLOAT = 27;
MiuLanguage_sinLexer.INT = 28;
MiuLanguage_sinLexer.IDF = 29;
MiuLanguage_sinLexer.ID = 30;
MiuLanguage_sinLexer.WS = 31;
MiuLanguage_sinLexer.INVALID = 32;



