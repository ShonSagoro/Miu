// Generated from ./MiuLanguage.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,31,262,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,1,0,1,
0,1,0,3,0,88,8,0,1,1,1,1,3,1,92,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,
1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,
1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,
24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
30,1,30,1,30,1,30,1,30,1,30,3,30,198,8,30,1,31,1,31,1,31,1,31,1,31,1,31,
1,31,1,31,1,31,3,31,209,8,31,1,32,1,32,5,32,213,8,32,10,32,12,32,216,9,32,
1,32,1,32,1,33,1,33,1,33,1,33,1,34,4,34,225,8,34,11,34,12,34,226,1,34,1,
34,4,34,231,8,34,11,34,12,34,232,1,35,4,35,236,8,35,11,35,12,35,237,1,36,
1,36,5,36,242,8,36,10,36,12,36,245,9,36,1,37,1,37,5,37,249,8,37,10,37,12,
37,252,9,37,1,38,1,38,1,39,4,39,257,8,39,11,39,12,39,258,1,39,1,39,0,0,40,
1,1,3,2,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,3,23,4,25,5,27,6,29,7,31,
8,33,9,35,10,37,11,39,12,41,13,43,14,45,15,47,16,49,17,51,18,53,19,55,20,
57,21,59,22,61,23,63,24,65,25,67,26,69,27,71,28,73,29,75,30,77,0,79,31,1,
0,7,1,0,34,34,1,0,39,39,1,0,48,57,1,0,65,90,2,0,65,90,97,122,3,0,48,57,65,
90,97,122,3,0,9,10,13,13,32,32,270,0,1,1,0,0,0,0,3,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,79,1,0,0,0,
1,87,1,0,0,0,3,91,1,0,0,0,5,93,1,0,0,0,7,96,1,0,0,0,9,99,1,0,0,0,11,102,
1,0,0,0,13,105,1,0,0,0,15,107,1,0,0,0,17,109,1,0,0,0,19,112,1,0,0,0,21,115,
1,0,0,0,23,117,1,0,0,0,25,120,1,0,0,0,27,124,1,0,0,0,29,128,1,0,0,0,31,131,
1,0,0,0,33,134,1,0,0,0,35,139,1,0,0,0,37,143,1,0,0,0,39,150,1,0,0,0,41,153,
1,0,0,0,43,155,1,0,0,0,45,158,1,0,0,0,47,160,1,0,0,0,49,162,1,0,0,0,51,165,
1,0,0,0,53,167,1,0,0,0,55,169,1,0,0,0,57,171,1,0,0,0,59,173,1,0,0,0,61,197,
1,0,0,0,63,208,1,0,0,0,65,210,1,0,0,0,67,219,1,0,0,0,69,224,1,0,0,0,71,235,
1,0,0,0,73,239,1,0,0,0,75,246,1,0,0,0,77,253,1,0,0,0,79,256,1,0,0,0,81,88,
3,5,2,0,82,88,3,11,5,0,83,88,3,13,6,0,84,88,3,15,7,0,85,88,3,17,8,0,86,88,
3,19,9,0,87,81,1,0,0,0,87,82,1,0,0,0,87,83,1,0,0,0,87,84,1,0,0,0,87,85,1,
0,0,0,87,86,1,0,0,0,88,2,1,0,0,0,89,92,3,7,3,0,90,92,3,9,4,0,91,89,1,0,0,
0,91,90,1,0,0,0,92,4,1,0,0,0,93,94,5,61,0,0,94,95,5,61,0,0,95,6,1,0,0,0,
96,97,5,38,0,0,97,98,5,38,0,0,98,8,1,0,0,0,99,100,5,124,0,0,100,101,5,124,
0,0,101,10,1,0,0,0,102,103,5,33,0,0,103,104,5,61,0,0,104,12,1,0,0,0,105,
106,5,62,0,0,106,14,1,0,0,0,107,108,5,60,0,0,108,16,1,0,0,0,109,110,5,62,
0,0,110,111,5,61,0,0,111,18,1,0,0,0,112,113,5,60,0,0,113,114,5,61,0,0,114,
20,1,0,0,0,115,116,5,61,0,0,116,22,1,0,0,0,117,118,5,102,0,0,118,119,5,110,
0,0,119,24,1,0,0,0,120,121,5,117,0,0,121,122,5,115,0,0,122,123,5,101,0,0,
123,26,1,0,0,0,124,125,5,108,0,0,125,126,5,101,0,0,126,127,5,116,0,0,127,
28,1,0,0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,30,1,0,0,0,131,132,5,
105,0,0,132,133,5,102,0,0,133,32,1,0,0,0,134,135,5,101,0,0,135,136,5,108,
0,0,136,137,5,115,0,0,137,138,5,101,0,0,138,34,1,0,0,0,139,140,5,102,0,0,
140,141,5,111,0,0,141,142,5,114,0,0,142,36,1,0,0,0,143,144,5,114,0,0,144,
145,5,101,0,0,145,146,5,116,0,0,146,147,5,117,0,0,147,148,5,114,0,0,148,
149,5,110,0,0,149,38,1,0,0,0,150,151,5,45,0,0,151,152,5,62,0,0,152,40,1,
0,0,0,153,154,5,46,0,0,154,42,1,0,0,0,155,156,5,46,0,0,156,157,5,46,0,0,
157,44,1,0,0,0,158,159,5,44,0,0,159,46,1,0,0,0,160,161,5,59,0,0,161,48,1,
0,0,0,162,163,5,58,0,0,163,164,5,58,0,0,164,50,1,0,0,0,165,166,5,58,0,0,
166,52,1,0,0,0,167,168,5,40,0,0,168,54,1,0,0,0,169,170,5,41,0,0,170,56,1,
0,0,0,171,172,5,123,0,0,172,58,1,0,0,0,173,174,5,125,0,0,174,60,1,0,0,0,
175,176,5,105,0,0,176,177,5,110,0,0,177,198,5,116,0,0,178,179,5,102,0,0,
179,180,5,108,0,0,180,181,5,111,0,0,181,182,5,97,0,0,182,198,5,116,0,0,183,
184,5,98,0,0,184,185,5,111,0,0,185,186,5,111,0,0,186,198,5,108,0,0,187,188,
5,115,0,0,188,189,5,116,0,0,189,190,5,114,0,0,190,191,5,105,0,0,191,192,
5,110,0,0,192,198,5,103,0,0,193,194,5,99,0,0,194,195,5,104,0,0,195,196,5,
97,0,0,196,198,5,114,0,0,197,175,1,0,0,0,197,178,1,0,0,0,197,183,1,0,0,0,
197,187,1,0,0,0,197,193,1,0,0,0,198,62,1,0,0,0,199,200,5,116,0,0,200,201,
5,114,0,0,201,202,5,117,0,0,202,209,5,101,0,0,203,204,5,102,0,0,204,205,
5,97,0,0,205,206,5,108,0,0,206,207,5,115,0,0,207,209,5,101,0,0,208,199,1,
0,0,0,208,203,1,0,0,0,209,64,1,0,0,0,210,214,5,34,0,0,211,213,8,0,0,0,212,
211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,0,
0,0,216,214,1,0,0,0,217,218,5,34,0,0,218,66,1,0,0,0,219,220,5,39,0,0,220,
221,8,1,0,0,221,222,5,39,0,0,222,68,1,0,0,0,223,225,7,2,0,0,224,223,1,0,
0,0,225,226,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,
230,3,41,20,0,229,231,7,2,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,
0,0,0,232,233,1,0,0,0,233,70,1,0,0,0,234,236,7,2,0,0,235,234,1,0,0,0,236,
237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,72,1,0,0,0,239,243,7,3,0,
0,240,242,3,77,38,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,
244,1,0,0,0,244,74,1,0,0,0,245,243,1,0,0,0,246,250,7,4,0,0,247,249,3,77,
38,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,
76,1,0,0,0,252,250,1,0,0,0,253,254,7,5,0,0,254,78,1,0,0,0,255,257,7,6,0,
0,256,255,1,0,0,0,257,258,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,260,
1,0,0,0,260,261,6,39,0,0,261,80,1,0,0,0,12,0,87,91,197,208,214,226,232,237,
243,250,258,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class MiuLanguageLexer extends antlr4.Lexer {

    static grammarFileName = "MiuLanguage.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, "'='", "'fn'", "'use'", "'let'", 
                         "'in'", "'if'", "'else'", "'for'", "'return'", 
                         "'->'", "'.'", "'..'", "','", "';'", "'::'", "':'", 
                         "'('", "')'", "'{'", "'}'" ];
	static symbolicNames = [ null, "COMPARISON_OPERATOR", "ADD_OPERATOR", "EQUAL", 
                          "FN", "USE", "LET", "IN", "IF", "ELSE", "FOR", 
                          "RETURN", "ARROW", "DOT", "DOUBLE_DOT", "COMMA", 
                          "PC", "PP", "P", "LPAREN", "RPAREN", "LBRACE", 
                          "RBRACE", "TYPE", "BOOL", "STRING", "CHAR", "FLOAT", 
                          "INT", "IDF", "ID", "WS" ];
	static ruleNames = [ "COMPARISON_OPERATOR", "ADD_OPERATOR", "EQ", "AND", 
                      "OR", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "EQUAL", 
                      "FN", "USE", "LET", "IN", "IF", "ELSE", "FOR", "RETURN", 
                      "ARROW", "DOT", "DOUBLE_DOT", "COMMA", "PC", "PP", 
                      "P", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "TYPE", 
                      "BOOL", "STRING", "CHAR", "FLOAT", "INT", "IDF", "ID", 
                      "IDN", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

MiuLanguageLexer.EOF = antlr4.Token.EOF;
MiuLanguageLexer.COMPARISON_OPERATOR = 1;
MiuLanguageLexer.ADD_OPERATOR = 2;
MiuLanguageLexer.EQUAL = 3;
MiuLanguageLexer.FN = 4;
MiuLanguageLexer.USE = 5;
MiuLanguageLexer.LET = 6;
MiuLanguageLexer.IN = 7;
MiuLanguageLexer.IF = 8;
MiuLanguageLexer.ELSE = 9;
MiuLanguageLexer.FOR = 10;
MiuLanguageLexer.RETURN = 11;
MiuLanguageLexer.ARROW = 12;
MiuLanguageLexer.DOT = 13;
MiuLanguageLexer.DOUBLE_DOT = 14;
MiuLanguageLexer.COMMA = 15;
MiuLanguageLexer.PC = 16;
MiuLanguageLexer.PP = 17;
MiuLanguageLexer.P = 18;
MiuLanguageLexer.LPAREN = 19;
MiuLanguageLexer.RPAREN = 20;
MiuLanguageLexer.LBRACE = 21;
MiuLanguageLexer.RBRACE = 22;
MiuLanguageLexer.TYPE = 23;
MiuLanguageLexer.BOOL = 24;
MiuLanguageLexer.STRING = 25;
MiuLanguageLexer.CHAR = 26;
MiuLanguageLexer.FLOAT = 27;
MiuLanguageLexer.INT = 28;
MiuLanguageLexer.IDF = 29;
MiuLanguageLexer.ID = 30;
MiuLanguageLexer.WS = 31;



